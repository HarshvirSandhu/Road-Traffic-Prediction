_HiStOrY_V2_
load("~/Files/R/Exercise_R/.RData")
load("~/.RData")
date_split <- function(dataframe) {
dataframe$Date <- sapply(strsplit(as.character(dataframe$DateTime), " "), "[", 1)
dataframe$Time <- sapply(strsplit(as.character(dataframe$DateTime), " "), "[", 2)
return(dataframe)
}
normal_distribution <- function(dataframe)
{
# Make a histogram
d_binsize <- IQR(dataframe)/4
d_mean <- mean(dataframe)
d_sd   <- sd(dataframe)
d_min  <- min(dataframe) - d_sd
d_max  <- max(dataframe) + d_sd
# generate normally distributed data with mean d_mean and standard deviation d_sd
d_norm <- rnorm(10000, d_mean, sd=d_sd)
d_min2 <- min(d_norm)
d_max2 <- max(d_norm)
if (d_min2 < d_min) { d_min <- d_min2 }
if (d_max2 > d_max) { d_max <- d_max2 }
# Make a histogram with normally distribution
d_bins <- seq(d_min, d_max, d_binsize)
# freq=FALSE ensures the area under the histogram = 1
hist(dataframe, freq=FALSE, breaks=d_bins)
d_hist <- hist(d_norm, plot=FALSE, xlab="Data", main="Distribution")
points(d_hist$mids, d_hist$density, type="l", col="blue")
}
hour_norm <- function(dataframe) {
time<-c(dataframe$Time[1:24])
means<-c(1:24)
layout(matrix(1:24, ncol = 6))
for (x in 1:24) {
data_h<- dataframe[which(data_1$Time== time[x]),]
m<-mean(data_h$Vehicles)
means[x] = means[x] - x + m
normal_distribution(data_h$Vehicles)
}
return(means)
}
traffic_forecast = function(dataframe,n) {
traffic_data <- ts(dataframe$Vehicles)
library(forecast)
autoArimaFit <- auto.arima(traffic_data)
plot(forecast(autoArimaFit, h=n))
print(accuracy(forecast(autoArimaFit, h=n)))
return(forecast(autoArimaFit, h=n))
}
data <-read.csv("traffic.csv")
data_1 <- data[which(data$Junction==1),]
data_2 <- data[which(data$Junction==2),]
data_3 <- data[which(data$Junction==3),]
data_4 <- data[which(data$Junction==4),]
data_1<-date_split(data_1)
date_split <- function(dataframe) {
dataframe$Date <- sapply(strsplit(as.character(dataframe$DateTime), " "), "[", 1)
dataframe$Time <- sapply(strsplit(as.character(dataframe$DateTime), " "), "[", 2)
return(dataframe)
}
data <-read.csv("traffic.csv")
data_1 <- data[which(data$Junction==1),]
data_2 <- data[which(data$Junction==2),]
data_3 <- data[which(data$Junction==3),]
data_4 <- data[which(data$Junction==4),]
setwd("~/Files/R/Project")
data_1 <- data[which(data$Junction==1),]
data <-read.csv("traffic.csv")
data_1 <- data[which(data$Junction==1),]
data_2 <- data[which(data$Junction==2),]
data_3 <- data[which(data$Junction==3),]
data_4 <- data[which(data$Junction==4),]
data_1<-date_split(data_1)
data_2<-date_split(data_2)
data_3<-date_split(data_3)
data_4<-date_split(data_4)
layout(matrix(1:4, ncol = 2))
normal_distribution(data_1$Vehicles)
normal_distribution(data_2$Vehicles)
normal_distribution(data_3$Vehicles)
normal_distribution(data_4$Vehicles)
predict_data_1 = traffic_forecast(data_1,200)
means = hour_norm(data_1)
normal_distribution <- function(dataframe)
{
# Make a histogram
d_binsize <- IQR(dataframe)/4
d_mean <- mean(dataframe)
d_sd   <- sd(dataframe)
d_min  <- min(dataframe) - d_sd
d_max  <- max(dataframe) + d_sd
# generate normally distributed data with mean d_mean and standard deviation d_sd
d_norm <- rnorm(10000, d_mean, sd=d_sd)
d_min2 <- min(d_norm)
d_max2 <- max(d_norm)
if (d_min2 < d_min) { d_min <- d_min2 }
if (d_max2 > d_max) { d_max <- d_max2 }
# Make a histogram with normally distribution
d_bins <- seq(d_min, d_max, d_binsize)
# freq=FALSE ensures the area under the histogram = 1
hist(dataframe, freq=FALSE, breaks=d_bins)
d_hist <- hist(d_norm, plot=FALSE, xlab="Data", main="Distribution")
points(d_hist$mids, d_hist$density, type="l", col="blue")
}
means = hour_norm(data_1)
normal_distribution(data_1$Vehicles)
normal_distribution <- function(dataframe)
{
# Make a histogram
d_binsize <- IQR(dataframe)/4
d_mean <- mean(dataframe)
d_sd   <- sd(dataframe)
d_min  <- min(dataframe) - d_sd
d_max  <- max(dataframe) + d_sd
# generate normally distributed data with mean d_mean and standard deviation d_sd
d_norm <- rnorm(10000, d_mean, sd=d_sd)
d_min2 <- min(d_norm)
d_max2 <- max(d_norm)
if (d_min2 < d_min) { d_min <- d_min2 }
if (d_max2 > d_max) { d_max <- d_max2 }
# Make a histogram with normally distribution
d_bins <- seq(d_min, d_max, d_binsize)
# freq=FALSE ensures the area under the histogram = 1
hist(dataframe, freq=FALSE, breaks=d_bins, xlab="Data", main="Distribution")
d_hist <- hist(d_norm, plot=FALSE)
points(d_hist$mids, d_hist$density, type="l", col="blue")
}
hour_norm <- function(dataframe) {
time<-c(dataframe$Time[1:24])
means<-c(1:24)
layout(matrix(1:24, ncol = 6))
for (x in 1:24) {
data_h<- dataframe[which(data_1$Time== time[x]),]
m<-mean(data_h$Vehicles)
means[x] = means[x] - x + m
normal_distribution(data_h$Vehicles)
}
return(means)
}
traffic_forecast = function(dataframe,n) {
traffic_data <- ts(dataframe$Vehicles)
library(forecast)
autoArimaFit <- auto.arima(traffic_data)
plot(forecast(autoArimaFit, h=n))
print(accuracy(forecast(autoArimaFit, h=n)))
return(forecast(autoArimaFit, h=n))
}
normal_distribution(data_1$Vehicles)
means = hour_norm(data_1)
layout(1)
plot(1:24,means,xlab="",ylab="b",xaxt="n")
axis(1,1:24,c(data_1$Time[1:24]),las=3)
predict_data_1 = traffic_forecast(data_1,200)
source("~/Files/R/Project/Predict.R")
source("D:/Project/Data.R", echo=TRUE)
source("D:/Project/Functions.R", echo=TRUE)
source("D:/Project/Analysis.R", echo=TRUE)
source("D:/Project/Predict.R", echo=TRUE)
zm()
library(zoom)
zm()
zm()
